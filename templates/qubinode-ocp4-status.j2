#!/bin/bash

COUNT=0
SLEEP_FOR=0
TIMEOUT=30
RC=0
KUBEADMIN_PASS=$(cat {{ project_dir }}/ocp4/auth/kubeadmin-password)
TOTAL_OPERATORS=$(oc get clusteroperators --no-headers=true | awk '{print $1}' | wc -l)
OPERATORS=$(oc get clusteroperators --no-headers=true | awk '{print $1}')
sp="/-\|"
sc=0

{% raw %}
spin() {
   printf "\b${sp:sc++:1}"
   ((sc==${#sp})) && sc=0
}

endspin() {
   printf "\r%s\n" "$@"
}
{% endraw %}

printf "%s\n" "    Varifying all Cluster operators are UP!"
until [[ $COUNT -eq $TOTAL_OPERATORS || $SLEEP_FOR -eq $TIMEOUT ]]
do
    for operator in $(echo $OPERATORS)
    do
        spin
        STATUS=$(oc get clusteroperator $operator -o=jsonpath='{range .status.conditions[*]}{.type}{" "}{.status}{" "}{.message}{"\n"}{end}'|awk '/Available/ {print $2}')
        if [ $STATUS == "True" ]
        then
            COUNT=$(($COUNT + 1))
        fi
    done
    sleep $SLEEP_FOR
    let SLEEP_FOR=SLEEP_FOR+1
done
endspin

if [ $SLEEP_FOR -eq $TIMEOUT ]
then
    printf "%s\n" "    Timeout waiting for all cluster operators to come up"
    RC=1
else
    printf "%s\n" "    All cluster operators are up"
    oc get nodes -o wide --no-headers=true| awk 'BEGIN{printf("    %-3s%-40s%-16s%-8s%-7s\n","#","FQDN","External IP","ROLE","STATUS")}{printf("    %-3s%-40s%-16s%-8s%-7s\n",NR,$1,$6,$3,$2)}'
    printf "%s\n" ""
    printf "%s\n" ""
    printf "%s\n" "    Console: https://console-openshift-console.apps.{{ cluster_name }}.{{ ocp4_cluster_domain }}"
    printf "%s\n" "    Username: kubeadmin"
    printf "%s\n" "    Password: $KUBEADMIN_PASS"
    printf "%s\n" ""

fi

exit $RC